serverless project create -n SampleDemo -d sampledemo.com -e abc@google.com -p default -r us-east-1 -s demo
serverless function create functions/student

add dependiences to package.json(root  sampledemoin our case)
	"aws-sdk": "^2.3.2",
	"serverless-cors-plugin": "^0.4.1",
	"serverless-lambda-prune-plugin": "^1.1.0",
	"serverless-offline": "^2.2.9",
	"serverless-optimizer-plugin": "^2.4.0",
	"serverless-plugin-autoprune": "^0.5.3"


add package.json to functions(if required)

add dynamodb.js in function/lib folder (then add code)
		'use strict';

		var dynamodb = module.exports;
		const vogels = require('vogels'),
			joi = require('joi'),
			 async = require('async'),
			 aws = require('aws-sdk');

		var projectName = process.env.SERVERLESS_PROJECT_NAME;
		var stage = process.env.SERVERLESS_STAGE;

						var studentTable = "StudentTableSls";

						var byId = 'by-id';
						var byUserId = 'by-userid';

						dynamodb.byId = byId;

						dynamodb.students = vogels.define('students', {
							hashKey: 'studentId',
							timestamps: true,
							schema: {
								studentId: joi.string(),
								studentName: joi.string()
							},
							indexes: [
								{ hashKey: 'studentId', name: byId, type: 'global' }
							],
							tableName: studentTable
						});




edit s-resources-cf for table resource

	"StudentTableSLSRes": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "studentId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "studentName",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "studentId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "studentName",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "1",
          "WriteCapacityUnits": "1"
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        },
        "TableName": "StudentTableSls"
      }
    }
	
	
add allow access for dynamodb and other resources in IamPolicy

  "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:${region}:*:*"
            },
			{
              "Effect": "Allow",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:*",
                "ec2:*",
                "lambda:*",
                "s3:*",
                "sns:*",
                "iam:PassRole"
              ],
              "Resource": "*"
            }
          ]
		  
edit handler for code change (get in our case)

add s-templates.json (for http handler)
edit s-project.json for allow headers and origin

npm install in root and function level and add package.json inside student and npminstall(this last bit is not necessary but i am stupid can't figure out why i am not able to fix this bug)

a) To deploy the resources:  serverless resources deploy -s <stage e.g. dev or yourname> -a
b) To deploy the lambda functions:  serverless function deploy -s <stage e.g. dev or yourname> -a
c) To deploy the endpoints:  serverless endpoint deploy -s <stage e.g. dev or yourname> -a
